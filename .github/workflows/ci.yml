name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./test-results
      env:
        Redis__Configuration: localhost:6379

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: ./test-results/

    - name: Build Docker images
      run: |
        docker build -f ExchangeRateProvider.Api/Dockerfile -t exchange-rate-provider-api:latest ./ExchangeRateProvider.Api
        docker build -f ExchangeRateProvider.Console/Dockerfile -t exchange-rate-provider-console:latest ./ExchangeRateProvider.Console

    - name: Test Docker containers
      run: |
        # Start Redis for testing
        docker run -d --name redis-test -p 6379:6379 redis:7-alpine

        # Test API container
        docker run -d --name api-test -p 8080:8080 --link redis-test:redis \
          -e ASPNETCORE_ENVIRONMENT=Development \
          -e Redis__Configuration=redis:6379 \
          exchange-rate-provider-api:latest

        # Wait for API to start
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

        # Test API endpoint
        curl -f "http://localhost:8080/api/exchange-rates?currencyCodes=USD,EUR"

        # Clean up
        docker stop api-test redis-test
        docker rm api-test redis-test

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security scan
      run: |
        dotnet list package --vulnerable
        dotnet list package --deprecated

  publish-artifacts:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build for publish
      run: |
        dotnet publish ExchangeRateProvider.Api/ExchangeRateProvider.Api.csproj \
          --configuration Release \
          --output ./publish/api \
          --runtime linux-x64 \
          --self-contained false

        dotnet publish ExchangeRateProvider.Console/ExchangeRateProvider.Console.csproj \
          --configuration Release \
          --output ./publish/console \
          --runtime linux-x64 \
          --self-contained false

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: published-artifacts
        path: ./publish/
